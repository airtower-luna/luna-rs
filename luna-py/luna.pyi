from decimal import Decimal
from typing import Self, final

__all__ = ['Client', 'MIN_SIZE', 'PacketRecord', 'Server']
MIN_SIZE: int


@final
class PacketRecord:
    source: str
    receive_time: Decimal
    size: int
    sequence: int
    timestamp: Decimal
    def __str__(self) -> str: ...


@final
class Server:
    buffer_size: int
    bind: str
    running: bool

    def __new__(cls, bind: str, port: int = 7800, buffer_size: int = 1500) \
            -> Self:
        ...

    def start(self) -> None: ...
    def stop(self) -> None: ...
    def join(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exception_type, exception_value, traceback) -> bool: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> PacketRecord: ...


@final
class Client:
    buffer_size: int
    echo: bool
    running: bool
    server: str

    def __new__(
            cls, server: str, buffer_size: int = 1500, echo: bool = True) \
            -> Self:
        ...

    def start(self) -> None: ...
    def put(self, delay: tuple[int, int], size: int) -> None: ...
    def close(self) -> None: ...
    def join(self) -> None: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exception_type, exception_value, traceback) -> bool: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> PacketRecord: ...
